/*
 * mixins for common CSS properties
 *
 ************************************************************************************************/
 

@mixin border-radius( $vert, $side, $radius ) {
	border-#{$vert}-#{$side}-radius: $radius;
}

@mixin box-sizing( $value: border-box ) {
	-webkit-box-sizing: $value;
	-moz-box-sizing: 	$value;
	box-sizing: 		$value;
}

@mixin box-shadow( $x: 0, $y: 0, $blur: 0, $color: #000, $inset:"" ) {
	-webkit-box-shadow: $x $y $blur $color #{$inset};
	-moz-box-shadow: 	$x $y $blur $color #{$inset};
	box-shadow: 		$x $y $blur $color #{$inset};
}

@mixin linear-gradient( $colStart, $colEnd ) {
	background:			-webkit-linear-gradient(top, $colStart 0%, $colEnd 100%);
	background:			-webkit-gradient(linear, left top, left bottom, from($colStart), to($colEnd)) 0 0;
	background:			-moz-linear-gradient(top, $colStart, $colEnd) 0 0;
	background:			-ms-linear-gradient(top, $colStart, $colEnd);
	background:			-o-linear-gradient(top, $colStart, $colEnd);
	//filter:				progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$colStart}, endColorstr=#{$colEnd});
}

@mixin linear-gradient-bkg-image( $url, $repeat, $x, $y, $colStart, $colEnd ) {
	background: url($url) $repeat $x $y;
	background: url($url) $repeat $x $y, -webkit-gradient(linear, left top, left bottom, from($colStart), to($colEnd)) 0 0;
	background: url($url) $repeat $x $y, -moz-linear-gradient(top, $colStart, $colEnd);
	background: url($url) $repeat $x $y, -ms-linear-gradient(top, $colStart, $colEnd);
	background: url($url) $repeat $x $y, -o-linear-gradient(top, $colStart, $colEnd);
}

@mixin opacity( $value ) {
	-ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$value * 100}); // ie8
	filter: alpha(opacity=#{$value * 100}); // ie 6-7
	opacity: $value; // good browsers
}

@mixin animation( $name, $duration, $function, $loop ) {
	-webkit-animation:	 $name $duration $function $loop;
	-moz-animation:		 $name $duration $function $loop;
	-ms-animation:		 $name $duration $function $loop;
	animation:			 $name $duration $function $loop;
}

@mixin transition( $property, $duration, $function: linear ) {	
	-webkit-transition: $property $duration $function;
	-moz-transition: 	$property $duration $function;
	-ms-transition: 	$property $duration $function;
	-o-transition: 		$property $duration $function;
	transition: 		$property $duration $function;
}

@mixin transform( $transform ) {
	-webkit-transform:	$transform;
	-moz-transform:		$transform;
	-ms-transform:		$transform;
	-o-transform: 		$transform;
	transform:			$transform;
}

@mixin perspective( $perspective ) {
	-webkit-perspective: 	$perspective;
	-moz-perspective: 		$perspective;
}

@mixin perspective-origin( $x, $y ) {
	-webkit-perspective: 	$x $y;
	-moz-perspective: 		$x $y;
}

@mixin float( $dir: left ) {
	display:			inline;
	float:				$dir;
}

@mixin font-size( $pixelSize: 16 ) {
	font-size: #{$pixelSize}px;
	font-size: #{$pixelSize / 16}rem;
}

@mixin inline-block() {
	display:			inline-block;
	*display:			inline;
	*zoom:				1;
}

@mixin tap-highlight-color( $color ) {
	-webkit-tap-highlight-color:	$color;
	-moz-tap-highlight-color:		$color;
	-o-tap-highlight-color:			$color;
}